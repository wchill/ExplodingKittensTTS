--[[ Lua code. See documentation: http://berserk-games.com/knowledgebase/scripting/ --]]

--[[ The OnLoad function. This is called after everything in the game save finishes loading.
Most of your script code goes here. --]]

--Scripting Zones
DISCARD_ZONE_GUID = '5baf56'
DRAW_ZONE_GUID = '6280d8'

--Player hand scripting zones
SCRIPTING_ZONE_GUIDS = {
    White = '9c9e19',
    Brown = 'db3581',
    Red = 'b6c0f8',
    Orange = 'e0d4c2',
    Yellow = '2f7bf2',
    Green = '3df377',
    Teal = '84744c',
    Blue = 'a93266',
    Purple = 'b7e03c',
    Pink = 'f1f91f'
}

HIDDEN_ZONE_GUIDS = {
    White = 'd26dc2',
    Brown = '96650e',
    Red = 'fab4a9',
    Orange = 'ef8c36',
    Yellow = '97a3d0',
    Green = 'acd560',
    Teal = 'e5cd9e',
    Blue = '7e9659',
    Purple = 'a97544',
    Pink = '07d6cd'
}

--Object GUIDs
DRAW_PILE_GUID = 'c71ba0'
DISCARD_PILE_GUID = '8bc79c'
TURN_TRACKER_GUID = 'ecde0e'
IMPLODING_KITTEN_ACTIVE_GUID = 'f5691f'

--Constants
ALL_COLORS = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
NO_EFFECT_CARDS = {'Beard Cat', 'Cattermelon', 'Hairy Potato Cat', 'Rainbow-Ralphing Cat', 'Tacocat', 'Feral Cat'}

--Status variables
drawing = false
alter_the_future = false
targeted_attack = false
defusing = false
required_defuse = 0
kittens_played = 0
defuses_played = 0


function onload()
    --[[ print('Onload!') --]]
    Turns.enable = false

    function callback(object_spawned, color)
        print(object_spawned.guid)
    end

    for _, color in ipairs(ALL_COLORS) do
        local transform = Player[color].getHandTransform()
        if false and transform ~= nil then
            obj = spawnObject({
                --type              = 'ScriptingTrigger',
                type              = 'FogOfWarTrigger',
                position          = transform.position,
                rotation          = transform.rotation,
                scale             = {transform.scale[1] * 4 / 3, transform.scale[2] * 4 / 3, transform.scale[3] * 4 / 3},
                callback_function = callback
                --sound             = -- bool,
                --params            = -- Table,
                --snap_to_grid      = -- bool,
            })
        end
        if false and transform ~= nil then
            local dist = 5
            local new_position = {
                transform.position[1] + dist * transform.forward[1],
                transform.position[2] + dist * transform.forward[2],
                transform.position[3] + dist * transform.forward[3],
            }
            local obj = spawnObject({
                --type              = 'ScriptingTrigger',
                type              = 'PlayerPawn',
                position          = new_position,
                rotation          = transform.rotation,
                scale             = {3, 3, 3},
                callback_function = function(obj) callback(obj, color) end,
                --sound             = -- bool,
                --params            = -- Table,
                --snap_to_grid      = -- bool,
            })
        end
    end
end

--[[ The Update function. This is called once per frame. --]]
function update ()
    --[[ print('Update loop!') --]]
end

function activatePlayerZones(player)
    local transform = Player[player].getHandTransform()
    if transform == nil then
        print('Unable to find hand zone for ' .. player .. ', zone activation failed')
        return
    end

    local convertedScale = {transform.scale[1] * 4 / 3, transform.scale[2] * 4 / 3, transform.scale[3] * 4 / 3}

    local scriptingZone = getObjectFromGUID(SCRIPTING_ZONE_GUIDS[player])
    local hiddenZone = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])

    if scriptingZone == nil then
        print('Could not get scripting zone')
    end
    if hiddenZone == nil then
        print('Could not get hidden zone')
    end

    scriptingZone.setPosition(transform.position)
    scriptingZone.setRotation(transform.rotation)
    scriptingZone.setScale(convertedScale)

    hiddenZone.setPosition(transform.position)
    hiddenZone.setRotation(transform.rotation)
    hiddenZone.setScale(convertedScale)
end

function deactivatePlayerZones(player)
    local scriptingZone = getObjectFromGUID(SCRIPTING_ZONE_GUIDS[player])
    local hiddenZone = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])

    if scriptingZone ~= nil then
        scriptingZone.setPosition({100, 100, 100})
        scriptingZone.setScale({0.01, 0.01, 0.01})
    end
    if hiddenZone ~= nil then
        hiddenZone.setPosition({100, 100, 100})
        hiddenZone.setScale({0.01, 0.01, 0.01})
    end
end

function onObjectEnterScriptingZone(zone, enter_object)
    if enter_object.tag == 'Card' then
        local drawing_player = nil
        for color, scripting_zone_guid in pairs(SCRIPTING_ZONE_GUIDS) do
            if zone.guid == scripting_zone_guid then
                drawing_player = color
                break
            end
        end

        if drawing_player ~= nil and (enter_object.held_by_color == nil or drawing_player == enter_object.held_by_color) then
            Wait.condition(function()
                local card_name = enter_object.getName()
                print('check in enter ' .. card_name .. ' in ' .. zone.guid)
                if not actionInProgress() and card_name == 'Exploding Kitten' then
                    if checkExplodingKittenCount(drawing_player) == false then
                        return
                    end
                end
            end, function() return enter_object.resting end)
        end
    end
end

function onObjectLeaveScriptingZone(zone, leave_object)
    if leave_object.tag == 'Card' then
        local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)
        local drawing_player = nil
        for color, scripting_zone_guid in pairs(SCRIPTING_ZONE_GUIDS) do
            if zone.guid == scripting_zone_guid then
                drawing_player = color
                break
            end
        end

        if drawing_player ~= nil and turnTracker.call('findIndexOfPlayer', drawing_player) ~= nil then
            Wait.condition(function()
                local card_name = leave_object.getName()
                if not actionInProgress() and card_name == 'Streaking Kitten' then
                    print('check in leave')
                    if checkExplodingKittenCount(drawing_player) == false then
                        return
                    end
                end
                drawing = false
            end, function() return leave_object.resting and leave_object.held_by_color == nil end)
        end
    end
end

function onDiscardPileChanged(params)
    local deck = params[1]
    local card = params[2]
    local card_guid = params[3]
    if card == nil or actionInProgress() then
        return
    end

    resolveCard(deck, card, card_guid)
end

function resolveCard(deck, card, card_guid)
    local drawPile = getObjectFromGUID(DRAW_PILE_GUID)
    local discardPile = getObjectFromGUID(DISCARD_PILE_GUID)
    local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)

    local player = turnTracker.call('getCurrentPlayerColor')

    if card == 'Favor' then
        -- do nothing, the players should handle this
        broadcastToColor('Pick a player and have them give you a card of their choosing', player)
    elseif card == 'Garbage Collection' then
        -- do nothing, the players should handle this
        broadcastToAll('All players must place 1 card facedown in the draw pile then shuffle it.')
    elseif card == 'Shuffle' then
        drawPile.call('shuffle')
    elseif card == 'See the Future' then
        local cards = drawPile.call('peekTopCards', 3)
        printToColor('[b]The next 3 cards are:[/b]', player)
        for _, card in ipairs(cards) do
            printToColor(card, player)
        end
    elseif card == 'See the Future (5x)' then
        local cards = drawPile.call('peekTopCards', 5)
        printToColor('[b]The next 5 cards are:[/b]', player)
        for _, card in ipairs(cards) do
            printToColor(card, player)
        end
    elseif card == 'Alter the Future' then
        alterTheFuture(player, 3)
    elseif card == 'Alter the Future (5x)' then
        alterTheFuture(player, 5)
    elseif card == 'Reverse' then
        turnTracker.call('reverseTurnOrder')
        turnTracker.call('endCurrentTurn')
    elseif card == 'Draw from the Bottom' then
        drawing = true
        drawPile.call('drawBottomCard', player)
        Wait.condition(function() turnTracker.call('endCurrentTurn') end, function() return drawing == false end)
    elseif card == 'Swap Top and Bottom' then
        drawPile.call('swapTopAndBottomCards')
    elseif card == 'Curse of the Cat Butt' then
        local hand_objs = Player[player].getHandObjects()
        for _, obj in ipairs(hand_objs) do
            obj.setHiddenFrom({player})
        end
        shuffleCardsInPlayerHand(player)
    elseif card == 'Skip' then
        turnTracker.call('endCurrentTurn')
    elseif card == 'Super Skip' then
        turnTracker.call('nextTurn')
    elseif card == 'Attack' then
        turnTracker.call('setNextPlayerTurns', 2)
        turnTracker.call('nextTurn')
    elseif card == 'Targeted Attack' then
        turnTracker.call('setNextPlayerTurns', 2)
        targeted_attack = true
        createPlayerSelectButtons(player, deck, card_guid, 'targetedAttack')
        broadcastToColor('Pass your turn to the player you want to target!', player)
    elseif card == 'Catomic Bomb' then
        drawPile.call('shuffle')
        drawPile.call('removeCardsWithName', 'Exploding Kitten')
        broadcastToAll('All Exploding Kittens have been moved to the top!')
        turnTracker.call('endCurrentTurn')
    elseif card == 'Imploding Kitten (not activated)' then
        getObjectFromGUID(IMPLODING_KITTEN_ACTIVE_GUID).deal(1, player)
        broadcastToColor('Place the Imploding Kitten card in your hand anywhere in the draw pile.', player)
        broadcastToAll('The Imploding Kitten has been activated!')
    elseif card == 'Imploding Kitten (activated)' then
        removePlayer(player)
    elseif card == 'Defuse' then
        defuses_played = defuses_played + 1
        if kittens_played > defuses_played then
            broadcastToAll(player .. ' must defuse ' .. (kittens_played - defuses_played) .. ' more kitten(s).')
        else
            defusing = false
            broadcastToAll('All kittens defused!')
        end
    elseif card == 'Exploding Kitten' then
        kittens_played = kittens_played + 1
        if kittens_played > defuses_played then
            broadcastToAll(player .. ' must defuse ' .. (kittens_played - defuses_played) .. ' more kitten(s).')
            defusing = true
        end
    end
end

function targetedAttack(target_color, calling_color, current_card)
    local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)
    if calling_color == turnTracker.call('getCurrentPlayerColor') then
        print(calling_color .. ' selected ' .. target_color)
        removeFakeCards('Targeted Attack')
        turnTracker.call('nextTurn', target_color)
    end
end

function alterTheFuture(player, draw_size)
    local drawPile = getObjectFromGUID(DRAW_PILE_GUID)

    local new_zones = createSecondHiddenZoneForPlayer(player)
    local hidden_zone = new_zones[1]
    local scripting_zone = new_zones[2]
    alter_the_future = true

    local deck_size = drawPile.call('getDeckSize')
    if draw_size > deck_size then
        draw_size = deck_size
    end

    callAfterSpawnFinished(function()
        local existing_obj_count = #(scripting_zone.getObjects())

        drawPile.call('drawTopCard', {player=player, count=draw_size, zone=hidden_zone})

        Wait.condition(function()
            drawPile.call('runFuncWhenDeckSizeHits', {self, 'postAlterTheFuture', {hidden_zone, scripting_zone}, deck_size})
            broadcastToColor('Place the cards back onto the deck in any order', player)
        end, function() return draw_size + existing_obj_count >= #(scripting_zone.getObjects()) end)
    end, hidden_zone, scripting_zone)
end

function postAlterTheFuture(zones)
    for _, zone in ipairs(zones) do
        destroyObject(zone)
    end
    alter_the_future = false
end

function removeFakeCards(card_name)
	local allObjs = getAllObjects()
	for _, object in ipairs(allObjs) do
		if object.tag == 'Card' and (object.getDescription() == 'Fake ' .. card_name .. ' Card') then
			destroyObject(object)
		end
	end
end

function createPlayerSelectButtons(currentPlayer, deck, card_guid, callback_func_name)
    local deck_pos = deck.getPosition()

    local current_card = getObjectFromGUID(card_guid)
    local should_remove = false

    function cloneTempCard(obj)
        current_card = current_card.clone({0, 0, 180})
        current_card.setLock(true)
        current_card.setPosition({deck_pos[1], deck_pos[2] + 0.5, deck_pos[3]})
    end

    if current_card == nil then
        print('take object')
        current_card = deck.takeObject({
            position          = {deck_pos[1], deck_pos[2] + 0.3, deck_pos[3]},
            rotation          = deck.getRotation(),
            callback_function = cloneTempCard,
            smooth            = true,
            guid              = card_guid
        })
    else
        print('changing')
        cloneTempCard(current_card)
    end

    function createPlayerSelectButtonsCoroutine()
        broadcastToColor('Click on the card in front of the person you want to target.', currentPlayer, {1, 1, 1})
        local card_name = 'Fake ' .. current_card.getName() .. ' Card'
        local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)
        local active_players = turnTracker.getVar('active_players')
        print(active_players)
        log(active_players)
        for _, playerColor in ipairs(active_players) do
            _G[playerColor .. callback_func_name] = function(obj, clicking_player, alt)
                _G[callback_func_name](playerColor, clicking_player, current_card)
            end

            local params = {rotation = {0, 0, 180}}
            local card = current_card.clone(params)
            card.setDescription(card_name)
            local color_table = stringColorToRGB(playerColor)
            local color_str = '{' .. color_table[1] .. ', ' .. color_table[2] .. ', ' .. color_table[3] .. ', ' .. color_table[4] .. '}'
            card.setLuaScript(
                'playerColor = \'' .. playerColor .. '\'\r\n\r\n' ..
                'function onCollisionEnter(collision_info)\r\n' ..
                '	local ph = Player[playerColor].getPlayerHand()\r\n' ..
                '	if ph then\r\n' ..
                '		self.setRotation({0, ph[\'rot_y\']+180, 0})\r\n' ..
                '	end\r\n' ..
                '	self.setLock(true)\r\n' ..
                'end\r\n\r\n' ..
                'function onLoad(saveString)\r\n' ..
                '	local button = {}\r\n' ..
                '	button.click_function = \'' .. playerColor .. callback_func_name .. '\'\r\n' ..
                '	button.label = \'' .. playerColor .. '\'\r\n' ..
                '	button.function_owner = Global\r\n' ..
                '	button.position = {0, 3, 0}\r\n' ..
                '	button.rotation = {0, 0, 0}\r\n' ..
                '	button.width = 800\r\n' ..
                '	button.height = 600\r\n' ..
                '	button.font_size = 150\r\n' ..
                '   button.color = ' .. color_str .. '\r\n' ..
                '   button.font_color = {0, 0, 0, 1}\r\n' ..
                '	self.createButton(button)\r\n' ..
                'end')
            local transform = Player[playerColor].getHandTransform()
            local dist = 15
            local new_position = {
                transform.position[1] + dist * transform.forward[1],
                transform.position[2] + dist * transform.forward[2],
                transform.position[3] + dist * transform.forward[3],
            }
            card.setPositionSmooth(new_position, false, false)
            card.setRotationSmooth(transform.rotation, false, false)
            wait(3)
        end
        destroyObject(current_card)
        return true
    end

    Wait.condition(function()
    	startLuaCoroutine(Global, 'createPlayerSelectButtonsCoroutine')
    end, function() return not current_card.spawning end, 3, function() print('Failed to spawn top card') end)
end

function removePlayer(player)
    broadcastToAll(player .. ' loses!')

    local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)
    turnTracker.call('removePlayer', player)

    local discardPile = getObjectFromGUID(DISCARD_PILE_GUID)
    local cards = {}
    for _, object in ipairs(Player[player].getHandObjects()) do
        if object.tag == 'Card' then
            cards[#cards + 1] = object
        end
    end
    discardPile.call('discardCards', cards)
    Wait.condition(function() deactivatePlayerZones(player) end, function() return #(Player[player].getHandObjects()) ~= 0 end)
end

function onSuccessfulPlayerDraw(player, card)
    local hand_objs = Player[player].getHandObjects()
    for _, obj in ipairs(hand_objs) do
        obj.setHiddenFrom({})
    end
end

function getCurrentPlayerColor()
    local turnTracker = getObjectFromGUID(TURN_TRACKER_GUID)
    return turnTracker.call('getCurrentPlayerColor')
end

function getDeckFromZone(zone_name)
    local zone = getObjectFromGUID(Global.getVar(zone_name))
    local inZone = zone.getObjects()
	for _, object in ipairs(inZone) do
		if object.tag == 'Deck' then
			return object
		end
	end
    return nil
end

function getDeckOrCardFromZone(zone_name)
    local zone = getObjectFromGUID(Global.getVar(zone_name))
    local inZone = zone.getObjects()
    local card = nil
	for _, object in ipairs(inZone) do
		if object.tag == 'Deck' then
			return object
        elseif object.tag == 'Card' then
            card = object
		end
	end
    return card
end

function wait(numFrames)
	for i=1,numFrames,1 do coroutine.yield(0) end
end

function shuffleCardsInPlayerHand(player)
    local objects = Player[player].getHandObjects()
    local cards = {}
    for _, object in ipairs(objects) do
        if object.tag == 'Card' then
            cards[#cards + 1] = object
        end
    end
    local new_deck = group(cards)[1]

    Wait.condition(function()
        new_deck.shuffle()
        new_deck.deal(#new_deck.getObjects(), player)
    end, function() return not new_deck.spawning end)
end

function createSecondHiddenZoneForPlayer(player)
    local hidden_zone = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player]).clone()
    local scripting_zone = getObjectFromGUID(SCRIPTING_ZONE_GUIDS[player]).clone()
    local scale = hidden_zone.getScale()
    local new_scale = {scale[1] * 2, scale[2], scale[3]}

    hidden_zone.setPosition(getOffsetFromPlayerHand(player, 10))
    hidden_zone.setScale(new_scale)
    scripting_zone.setPosition(getOffsetFromPlayerHand(player, 10))
    scripting_zone.setScale(new_scale)
    return {hidden_zone, scripting_zone}
end

function getOffsetFromPlayerHand(player, forward, right, up)
    local hand = Player[player].getHandTransform()
    forward = forward or 0
    right = right or 0
    up = up or 0
    return {
        hand.position[1] + forward * hand.forward[1] + right * hand.right[1] + up * hand.up[1],
        hand.position[2] + forward * hand.forward[2] + right * hand.right[2] + up * hand.up[2],
        hand.position[3] + forward * hand.forward[3] + right * hand.right[3] + up * hand.up[3],
    }
end

function countNumberOfMatchingCardsInZone(zone, card)
    local count = 0

    for i, object in ipairs(zone.getObjects()) do
        if object.tag == 'Card' then
            if object.getName() == card then
                count = count + 1
            end
        end
    end

    return count
end

function checkExplodingKittenCount(player)
    log(player, 'checkExplodingKittenCount')
    local zone = getObjectFromGUID(SCRIPTING_ZONE_GUIDS[player])
    required_defuse = countNumberOfMatchingCardsInZone(zone, 'Exploding Kitten') - countNumberOfMatchingCardsInZone(zone, 'Streaking Kitten')
    local defuses = countNumberOfMatchingCardsInZone(zone, 'Defuse')
    if defuses < required_defuse then
        removePlayer(player)
        return false
    elseif required_defuse > 0 then
        broadcastToColor('You must play and defuse at least ' .. required_defuse .. ' Exploding Kitten(s) before you can end your turn.', player, {1, 0, 0})
    end
    return true
end

function callAfterSpawnFinished(func, object, object2)
    Wait.condition(func, function() return (object == nil or not object.spawning) and (object2 == nil or not object2.spawning) end)
end

function onChat(message, player)
    if message == 'c' then
        checkExplodingKittenCount(player.color)
    end
end

function actionInProgress()
    local result = alter_the_future or targeted_attack or defusing
    log(result, 'actionInProgress')
    return result
end

function isEndingTurnAllowed()
    log(required_defuse, 'required defuse')
    log(kittens_played, 'kittens played')
    log(defuses_played, 'defuses_played')
    local result = not actionInProgress() and (kittens_played >= required_defuse and defuses_played >= kittens_played)
    log(result, 'isEndingTurnAllowed')
    return result
end

function resetTurnState()
    drawing = false
    alter_the_future = false
    targeted_attack = false
    defusing = false
    required_defuse = 0
    kittens_played = 0
    defuses_played = 0
end
