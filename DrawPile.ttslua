--Static
ZONE_NAME = "DRAW_ZONE_GUID"
PRINT_NAME = "Draw Pile"

ZONE_GUID = Global.getVar(ZONE_NAME)

--Variable
loadDone = false
waitId = nil

callback_context = nil
callback_active = nil
callback_params = {}
callback_count = 0

function onLoad()
	loadDone = true
end

function onCollisionEnter(info)
	if loadDone then

	end
end

function onCollisionExit(info)
	if loadDone then
		countCards()
	end
end

function secondCheck()
	countCards()
end

function countCards()
	local zone = getObjectFromGUID(ZONE_GUID)
	local object

	local inZone = zone.getObjects()

	local objects_to_group = {}

	for _, object in ipairs(inZone) do
		if object.tag == 'Card' or object.tag == 'Deck' then
			objects_to_group[#objects_to_group + 1] = object
		end
	end

	local primaryObj = group(objects_to_group)[1]

	Wait.condition(function()
		if primaryObj ~= nil then
	        local pilePosition = self.getPosition()
	        primaryObj.setPositionSmooth({pilePosition[1], primaryObj.getPosition()[2], pilePosition[3]}, false, false)
		end

		if callback_active ~= nil then
			local size = getDeckSize()
			if size == callback_count then
				local callback = callback_active
				callback_active = nil
				callback_context.call(callback, callback_params)
			end
		end
	end, function() return primaryObj == nil or not primaryObj.spawning end, 3, function() print('Grouping failed') end)
end

function getDeckFromZone()
    return Global.call('getDeckFromZone', ZONE_NAME)
end

function drawTopCard(params)
    local deck = getDeckFromZone()
    local player = params['player']
    local count = params['count'] or 1
	local zone = params['zone']

    print('Dealing ' .. count .. ' card(s) to ' .. player)

	local offset = {0, 0, 0}
	local dx = 0
	if zone ~= nil then
		local zone_pos = zone.getPosition()
		local hand_pos = Player[player].getHandTransform().position
		local scale = zone.getScale()
		offset = {zone_pos[1] - hand_pos[1] - 0.5 * scale[1], zone_pos[2] - hand_pos[2], zone_pos[3] - hand_pos[3]}
		dx = 0.8 * scale[1] / count
	end

	for i=1, count do
		deck.dealToColorWithOffset({offset[1] + i * dx, offset[2] + i * 0.2, offset[3]}, false, player)
		if deck.remainder ~= nil then
			deck = deck.remainder
		end
	end
end

function drawBottomCard(player)
    local deck = getDeckFromZone()
    local player_obj = Player[player]
    local hand_zone = player_obj.getHandTransform()
    local hand_pos = hand_zone['position']
    deck.takeObject({
        position          = {hand_pos[1], hand_pos[2] + 0.1, hand_pos[3]},
        rotation          = hand_zone['rotation'],
        smooth            = true,
        top               = false
    })
end

function swapTopAndBottomCards()
    local deck = getDeckFromZone()
    local deck_pos = self.getPosition()

    if #deck.getObjects() < 2 then
        return
    end

    deck.setPositionSmooth({deck_pos[1], deck_pos[2] + 0.5, deck_pos[3]}, false, false)

    local top = deck.takeObject({
        position          = {deck_pos[1], deck_pos[2], deck_pos[3]},
        top               = true
    })

    local bottom = deck.takeObject({
        position          = {deck_pos[1], deck_pos[2] + 1.0, deck_pos[3]},
        top               = false
    })

    broadcastToAll('The top and bottom cards have been swapped.')
end

function peekTopCards(count)
    local deck = getDeckFromZone()
    local objects = deck.getObjects()
    local ret = {}
    for i=1, count do
        if objects[i] ~= nil then
            ret[i] = objects[i]['name']
        end
    end
    return ret
end

function removeCardsWithName(name)
    local deck = getDeckFromZone()
    local objects = deck.getObjects()
    local deck_pos = self.getPosition()

    local bomb_cards = {}

    for _, object in ipairs(objects) do
        if object['name'] == name then
            bomb_cards[#bomb_cards + 1] = object['guid']
        end
    end

    for _, guid in ipairs(bomb_cards) do
        deck.takeObject({
            position          = {deck_pos[1], deck_pos[2] + 1.0, deck_pos[3]},
            guid              = guid
        })
    end
end

function getDeckSize()
	local deck = getDeckFromZone()
	return #(deck.getObjects())
end

function shuffle()
    local deck = getDeckFromZone()
    deck.shuffle()
end

function runFuncWhenDeckSizeHits(params)
	callback_context = params[1]
	callback_active = params[2]
	callback_params = params[3]
	callback_count = params[4]
end
